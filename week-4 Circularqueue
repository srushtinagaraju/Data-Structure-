#include <stdio.h>
#include <stdlib.h>

#define SIZE 5 

typedef struct {
    int items[SIZE];
    int front;
    int rear;
} CircularQueue;

void initialize(CircularQueue* q) {
    q->front = -1;
    q->rear = -1;
}

int is_empty(CircularQueue* q) {
    return (q->front == -1);
}

int is_full(CircularQueue* q) {
    return ((q->rear + 1) % SIZE == q->front);
}

void insert(CircularQueue* q, int value) {
    if (is_full(q)) {
        printf("Queue Overflow! Cannot insert the element.\n");
        return;
    }

    if (is_empty(q)) {
        q->front = 0;
    }

    q->rear = (q->rear + 1) % SIZE;
    q->items[q->rear] = value;
    printf("Inserted %d into the queue.\n", value);
}

void delete(CircularQueue* q) {
    if (is_empty(q)) {
        printf("Queue Underflow! Cannot delete any element.\n");
        return;
    }

    int deleted_value = q->items[q->front];
    if (q->front == q->rear) {  
        q->front = -1;
        q->rear = -1;
    } else {
        q->front = (q->front + 1) % SIZE;
    }

    printf("Deleted %d from the queue.\n", deleted_value);
}

void display(CircularQueue* q) {
    if (is_empty(q)) {
        printf("The queue is empty.\n");
        return;
    }

    printf("Queue elements are: ");
    int i = q->front;
    while (1) {
        printf("%d ", q->items[i]);
        if (i == q->rear) {
            break;
        }
        i = (i + 1) % SIZE;
    }
    printf("\n");
}

int main() {
    CircularQueue q; 
    initialize(&q);  

    int choice = 0;  
    while (choice != 4) {
        printf("1. Insert\n2. Delete\n3. Display\n4. Exit\n");
        printf("Enter a choice: ");
        scanf("%d", &choice);  
        switch (choice) {
            case 1: {  
                int value;  
                printf("Enter value to insert: ");
                scanf("%d", &value);  
                insert(&q, value);  
                break;
            }
            case 2:
                delete(&q);  
                break;
            case 3:  
                display(&q);  
                break;
            case 4: 
                exit(0);
                
            default:
                printf("Invalid choice \n");
        }
    }

    return 0; 
}
